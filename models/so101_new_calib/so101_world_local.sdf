<?xml version="1.0" ?>
<sdf version="1.9">
  <world name="so101_world_local">
    <!-- Imprescindibles para que la GUI reciba la escena y comandos -->
    <plugin name="gz::sim::systems::SceneBroadcaster"
            filename="gz-sim-scene-broadcaster-system"/>
    <plugin name="gz::sim::systems::UserCommands"
            filename="gz-sim-user-commands-system"/>

    <!-- Sensores (se queda separado, no meter nada dentro salvo su config) -->
    <plugin name="gz::sim::systems::Sensors"
            filename="gz-sim-sensors-system">
      <render_engine>ogre2</render_engine>
    </plugin>



    <!-- Físicas básicas -->
    <gravity>0 0 -9.81</gravity>
    <atmosphere type="adiabatic"/>

    <!-- Luz direccional 'sun' inline -->
    <light name="sun" type="directional">
      <pose>0 0 10 0 0 0</pose>
      <cast_shadows>true</cast_shadows>
      <diffuse>1 1 1 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.5 -1</direction>
    </light>

    <!-- Plano de suelo inline -->
        <!-- Plano de suelo inline -->
    <model name="ground_plane">
      <static>true</static>
      <link name="ground_link">
        <collision name="ground_collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>200 200</size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1.0</mu>
                <mu2>1.0</mu2>
              </ode>
            </friction>
          </surface>
        </collision>
        <visual name="ground_visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>200 200</size>
            </plane>
          </geometry>
          <material>
            <ambient>0.5 0.5 0.5 1</ambient>
            <diffuse>0.5 0.5 0.5 1</diffuse>
            <specular>0 0 0 1</specular>
          </material>
        </visual>
      </link>
    </model>  <!-- ← FALTABA ESTE CIERRE -->
    
    <!-- Árbol con malla STL -->
    <model name="tree_model">
      <pose>0 2 0 0 0 0</pose>
      <static>true</static>
      <link name="tree_link">

        <collision name="tree_collision">
          <geometry>
            <mesh>
              <!-- Ajusta <tu_modelo> al nombre real de la carpeta con model.config -->
              <uri>model://meshes/Tree_watertight_for_print.stl</uri>
              <scale>0.1 0.1 0.1</scale>
            </mesh>
          </geometry>
          <pose>0 0 0 0 0 0</pose>
          <laser_retro>0.8</laser_retro>
        </collision>

        <visual name="tree_visual">
          <geometry>
            <mesh>
              <uri>model://meshes/Tree_watertight_for_print.stl</uri>
              <scale>0.1 0.1 0.1</scale>
            </mesh>
          </geometry>
          <pose>0 0 0 0 0 0</pose>
          <material>
            <ambient>0.2 0.6 0.2 1</ambient>
            <diffuse>0.2 0.6 0.2 1</diffuse>
            <double_sided>true</double_sided>
          </material>
        </visual>

            <!-- Visual "fantasma" que copia la colisión -->
        <visual name="tree_collision_debug">
          <geometry>
            <mesh>
              <uri>model://meshes/Tree_watertight_for_print.stl</uri>
              <scale>0.1 0.1 0.1</scale>
            </mesh>
          </geometry>
          <pose>0 0 0 0 0 0</pose>
          <material>
            <ambient>1 0 0 0.3</ambient>   <!-- rojo translúcido -->
            <diffuse>1 0 0 0.3</diffuse>
            <double_sided>true</double_sided>
          </material>
        </visual>

      </link>
    </model>









    <!-- Tu robot desde archivo local URDF (sin model://) -->
    <include>
      <uri>file://so101.urdf</uri>
      <name>so101</name>
      <pose>0 0 0 0 0 0</pose>
      <static>true</static>   <!-- ← esto congela TODO el modelo -->
    </include>

    <!-- Sensor LIDAR Velodyne HDL-32 -->
    <model name="velodyne_hdl-32">
      <!-- Give the base link a unique name -->
      <link name="base">

        <!-- Offset the base by half the lenght of the cylinder -->
        <pose>0 0 0.029335 0 0 0</pose>
        <collision name="base_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>.04267</radius>
              <length>.05867</length>
            </cylinder>
          </geometry>
        </collision>

        <!-- The visual is mostly a copy of the collision -->
        <visual name="base_visual">
          <geometry>
            <cylinder>
              <radius>.04267</radius>
              <length>.05867</length>
            </cylinder>
          </geometry>
        </visual>
      </link>

      <!-- Give the base link a unique name -->
      <link name="top">
      <!-- Add a ray sensor, and give it a name -->
        <!-- GPU Lidar compatible con Gazebo Sim (Harmonic) -->
        <sensor name="top_lidar" type="gpu_lidar">
          <!-- misma pose que usabas: rota 90° sobre X para “rayos verticales” -->
          <pose>0 0 0 0 0 0</pose>

          <visualize>true</visualize>
          <always_on>true</always_on>
          <update_rate>30</update_rate>
          <!-- cambia el tópico si quieres; este es de Gazebo Transport -->
          <topic>/so101/scan</topic>

          <lidar>
            <scan>
              <horizontal>
                <samples>32</samples>
                <resolution>1</resolution>
                <min_angle>-0.53529248</min_angle>
                <max_angle> 0.18622663</max_angle>
              </horizontal>
              <!-- sin barrido vertical: 1 muestra -->
              <vertical>
                <samples>1</samples>
                <resolution>1</resolution>
                <min_angle>0</min_angle>
                <max_angle>0</max_angle>
              </vertical>
            </scan>

            <range>
              <min>0.05</min>
              <max>70.0</max>
              <resolution>0.02</resolution>
            </range>

            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.002</stddev>
            </noise>
          </lidar>
        </sensor>


        <!-- Vertically offset the top cylinder by the length of the bottom
            cylinder and half the length of this cylinder. -->
        <pose>0 0 0.095455 0 0 0</pose>
        <collision name="top_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>0.04267</radius>
              <length>0.07357</length>
            </cylinder>
          </geometry>
        </collision>

        <!-- The visual is mostly a copy of the collision -->
        <visual name="top_visual">
          <geometry>
            <cylinder>
              <radius>0.04267</radius>
              <length>0.07357</length>
            </cylinder>
          </geometry>
        </visual>
      </link>
    </model>
  
  











  </world>
</sdf>
